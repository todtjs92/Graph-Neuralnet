{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"lab4 (ans) - graphsage, gat","provenance":[{"file_id":"1q-lIkbLT8Tj8_NAYINBYWxYxaCIG_C-d","timestamp":1636098159909}],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.3"},"widgets":{"application/vnd.jupyter.widget-state+json":{"8a0aae31ed8f40f7b86504a6513e3afd":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_129ae7af501a4e69a101ae2d99ad333e","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_86239ceb48e24910beee387c1e1631ac","IPY_MODEL_de287927101b48baafd21b27395d4d42","IPY_MODEL_8ac9d4583024493a89d5246df1598938"]}},"129ae7af501a4e69a101ae2d99ad333e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"86239ceb48e24910beee387c1e1631ac":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_72c3e473df17481caf683aa07a73af2b","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Loss for Epoch 490: 0.1608 | Test Accuracy for is Epoch 490: 0.6960: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_2e79ab5ccfce438087fe32e919817f2f"}},"de287927101b48baafd21b27395d4d42":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_a6101dd8d6b645c194eaca2426f76d95","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":500,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":500,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f24260774b114d89a02711fb140445ce"}},"8ac9d4583024493a89d5246df1598938":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_7d6a91a11aed437384e279cd7d56aef9","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 500/500 [00:56&lt;00:00,  9.35it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_f2e37ec84590445daf94fbf19368d1ef"}},"72c3e473df17481caf683aa07a73af2b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"2e79ab5ccfce438087fe32e919817f2f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"a6101dd8d6b645c194eaca2426f76d95":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"f24260774b114d89a02711fb140445ce":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"7d6a91a11aed437384e279cd7d56aef9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"f2e37ec84590445daf94fbf19368d1ef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"70843427c6c04909b33f5095c75bc4a2":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_view_name":"HBoxView","_dom_classes":[],"_model_name":"HBoxModel","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.5.0","box_style":"","layout":"IPY_MODEL_fcbb87a919ae4075980641cfebf698bc","_model_module":"@jupyter-widgets/controls","children":["IPY_MODEL_56cd81cdab9a424e958c6ad5ca931c61","IPY_MODEL_a6535fa89cf646a8915cd07ef4f586aa","IPY_MODEL_f0395a746fcd4231a09c1b57ee21cf05"]}},"fcbb87a919ae4075980641cfebf698bc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"56cd81cdab9a424e958c6ad5ca931c61":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_3399c91b62d94326b8a981d62d0dacef","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":"Loss for Epoch 490: 0.4504 | Test Accuracy for is Epoch 490: 0.5480: 100%","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_8e2e2743ab09465589b30906308557d2"}},"a6535fa89cf646a8915cd07ef4f586aa":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_view_name":"ProgressView","style":"IPY_MODEL_f6dad5dcf7184c818ab53e4e142169bf","_dom_classes":[],"description":"","_model_name":"FloatProgressModel","bar_style":"success","max":500,"_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":500,"_view_count":null,"_view_module_version":"1.5.0","orientation":"horizontal","min":0,"description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_594ad399ffe044f2b50c0dba87b4315a"}},"f0395a746fcd4231a09c1b57ee21cf05":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_view_name":"HTMLView","style":"IPY_MODEL_08180288d4b24449a93bb00b51f2fc7a","_dom_classes":[],"description":"","_model_name":"HTMLModel","placeholder":"​","_view_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","value":" 500/500 [01:39&lt;00:00,  5.31it/s]","_view_count":null,"_view_module_version":"1.5.0","description_tooltip":null,"_model_module":"@jupyter-widgets/controls","layout":"IPY_MODEL_29c17cb836304e659d8d832e41fcdb81"}},"3399c91b62d94326b8a981d62d0dacef":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"8e2e2743ab09465589b30906308557d2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"f6dad5dcf7184c818ab53e4e142169bf":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"ProgressStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","bar_color":null,"_model_module":"@jupyter-widgets/controls"}},"594ad399ffe044f2b50c0dba87b4315a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}},"08180288d4b24449a93bb00b51f2fc7a":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_view_name":"StyleView","_model_name":"DescriptionStyleModel","description_width":"","_view_module":"@jupyter-widgets/base","_model_module_version":"1.5.0","_view_count":null,"_view_module_version":"1.2.0","_model_module":"@jupyter-widgets/controls"}},"29c17cb836304e659d8d832e41fcdb81":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_view_name":"LayoutView","grid_template_rows":null,"right":null,"justify_content":null,"_view_module":"@jupyter-widgets/base","overflow":null,"_model_module_version":"1.2.0","_view_count":null,"flex_flow":null,"width":null,"min_width":null,"border":null,"align_items":null,"bottom":null,"_model_module":"@jupyter-widgets/base","top":null,"grid_column":null,"overflow_y":null,"overflow_x":null,"grid_auto_flow":null,"grid_area":null,"grid_template_columns":null,"flex":null,"_model_name":"LayoutModel","justify_items":null,"grid_row":null,"max_height":null,"align_content":null,"visibility":null,"align_self":null,"height":null,"min_height":null,"padding":null,"grid_auto_rows":null,"grid_gap":null,"max_width":null,"order":null,"_view_module_version":"1.2.0","grid_template_areas":null,"object_position":null,"object_fit":null,"grid_auto_columns":null,"margin":null,"display":null,"left":null}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"XuXWJLEm2UWS"},"source":["# **Lab 4**\n","- **GraphSAGE** ([Hamilton et al. (2017)](https://arxiv.org/abs/1706.02216))\n","- **GAT** ([Veličković et al. (2018)](https://arxiv.org/abs/1710.10903))"]},{"cell_type":"markdown","metadata":{"id":"qAwjm-p4Eb9b"},"source":["- 수업 내용 변화에 따라 실습 내용이 변경되었습니다.\n","- 마지막 실습에는 Hetrogenous graph와 관련 내용으로 진행합니다."]},{"cell_type":"markdown","metadata":{"id":"MSaetj53YnT6"},"source":["# 환경설정\n","- GPU 사용: Colab 메뉴 이용\n","    - 런타임 > 런타임 유형 변경 > 하드웨어 가속기: GPU"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Y5LAUDXD-jg","executionInfo":{"status":"ok","timestamp":1636193343174,"user_tz":-540,"elapsed":25020,"user":{"displayName":"Jiwon Kang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GixQYpi_RBtTGcWbRNimF9qJjS18QgWoTMByMMiaQ=s64","userId":"00753733448893989043"}},"outputId":"6a80c2a8-8236-4164-8595-b7e4818c2daf"},"source":["import torch\n","print(\"PyTorch has version {}\".format(torch.__version__))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PyTorch has version 1.9.0+cu111\n"]}]},{"cell_type":"code","metadata":{"id":"J_m9l6OYCQZP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1636193360045,"user_tz":-540,"elapsed":16877,"user":{"displayName":"Jiwon Kang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GixQYpi_RBtTGcWbRNimF9qJjS18QgWoTMByMMiaQ=s64","userId":"00753733448893989043"}},"outputId":"d338017f-5103-407b-c694-248f3bfe2724"},"source":["# Install torch geometric\n","!pip install -q torch-scatter -f https://pytorch-geometric.com/whl/torch-1.9.0+cu111.html\n","!pip install -q torch-sparse -f https://pytorch-geometric.com/whl/torch-1.9.0+cu111.html\n","!pip install -q torch-geometric"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[K     |████████████████████████████████| 10.4 MB 4.4 MB/s \n","\u001b[K     |████████████████████████████████| 3.7 MB 4.2 MB/s \n","\u001b[K     |████████████████████████████████| 325 kB 4.4 MB/s \n","\u001b[K     |████████████████████████████████| 407 kB 38.4 MB/s \n","\u001b[K     |████████████████████████████████| 45 kB 3.6 MB/s \n","\u001b[?25h  Building wheel for torch-geometric (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}]},{"cell_type":"markdown","metadata":{"id":"ZoXlf4MtYrbz"},"source":["# GNN Layers\n","\n","- Goal: GraphSAGE와 GAT를 직접 구현해보자! 🤜🤛\n","    - torch geometric에서 제공하는 레이어를 쓸 수도 있겠지만, 경우에 따라선 레이어 내부를 변경해야하는 일도 분명 발생할 것! \n","\n","- **Dataset: Cora (document-citation graph)**\n","- Node $V$ is a document ($n=2708$)\n","- Node Feature $X$ is the word representation of the given document\n","- Node Label $y$ ($n=7$)\n","- Undirected edge $E$ is citation ($n=5429$)"]},{"cell_type":"markdown","metadata":{"id":"H4ne6Gw-CT5G"},"source":["## GNN Stack Module\n","\n","- classification을 위한 GNN 기본 템플릿으로 해당 모델 클래스에 GraphSAGE와 GAT Layer 모델만 바꿔주면 사용가능합니다."]},{"cell_type":"code","metadata":{"id":"Ys8vZAFPCWWe"},"source":["import torch\n","import torch_scatter\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","import torch_geometric.nn as pyg_nn\n","import torch_geometric.utils as pyg_utils\n","\n","from torch import Tensor\n","from typing import Union, Tuple, Optional\n","from torch_geometric.typing import (OptPairTensor, Adj, Size, NoneType,\n","                                    OptTensor)\n","\n","from torch.nn import Parameter, Linear\n","from torch_sparse import SparseTensor, set_diag\n","from torch_geometric.nn.conv import MessagePassing\n","from torch_geometric.utils import remove_self_loops, add_self_loops, softmax\n","\n","class GNNStack(torch.nn.Module):\n","    def __init__(self, input_dim, hidden_dim, output_dim, args, emb=False):\n","        super(GNNStack, self).__init__()\n","        conv_model = self.build_conv_model(args.model_type)\n","        self.convs = nn.ModuleList()\n","        self.convs.append(conv_model(input_dim, hidden_dim))\n","        assert (args.num_layers >= 1), 'Number of layers is not >=1'\n","        for l in range(args.num_layers-1):\n","            self.convs.append(conv_model(args.heads * hidden_dim, hidden_dim))\n","\n","        # post-message-passing\n","        self.post_mp = nn.Sequential(\n","            nn.Linear(args.heads * hidden_dim, hidden_dim), nn.Dropout(args.dropout), \n","            nn.Linear(hidden_dim, output_dim))\n","\n","        self.dropout = args.dropout\n","        self.num_layers = args.num_layers\n","\n","        self.emb = emb\n","\n","    def build_conv_model(self, model_type):\n","        if model_type == 'GraphSage':\n","            return GraphSage\n","        elif model_type == 'GAT':\n","            return GAT\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","          \n","        for i in range(self.num_layers):\n","            x = self.convs[i](x, edge_index)\n","            x = F.relu(x)\n","            x = F.dropout(x, p=self.dropout)\n","\n","        x = self.post_mp(x)\n","\n","        if self.emb == True:\n","            return x\n","\n","        return F.log_softmax(x, dim=1)\n","\n","    def loss(self, pred, label):\n","        return F.nll_loss(pred, label)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"syDtxjxoCZgq"},"source":["## GraphSage Implementation\n","\n","- Goal: `forward`, `message`, `aggregate` 함수 구현하기\n","- `forward`: message passing이 이뤄지는 함수입니다. \n","    - propagate 함수가 주어진 노드 $i$의 이웃 노드 $j$의 정보를 노드 $i$에 전달하는 함수로, 보통 \"pre-processing -> propagate -> post-processing\" 순서로 진행됩니다. \n","    - 코드에서는 propagate, post-processing 부분을 구현합니다.\n","    - **propagate**을 위해서는 노드 $v$의 이웃노드들의 정보인 **message**를 **aggregate**해서 node embedding을 **update** 해주는 과정을 진행합니다.\n","    - `PyG` 패키지의 ` propagate()` 함수를 이용하면, 해당 함수를 호출할 때, message(), aggregate(), update()가 순차적으로 호출됩니다.\n","- Some details for GraphSage:\n","    - **Skip connections**: **update**할 때, skip connection을 추가해서, over-smoothing 현상을 방지해줄 예정이고요. 수식으로 표현하면, 다음과 같습니다.\n","\\begin{equation}\n","h_v^{(l)} = W_l\\cdot h_v^{(l-1)} + W_r \\cdot AGG(\\{h_u^{(l-1)}, \\forall u \\in N(v) \\})\n","\\end{equation}\n","    - 해당 내용은 `forward()` 함수에서 구현됩니다.\n","\n","    - **Aggregate function**: 간단하게 Average를 사용합니다 \n","\\begin{equation}\n","AGG(\\{h_u^{(l-1)}, \\forall u \\in N(v) \\}) = \\frac{1}{|N(v)|} \\sum_{u\\in N(v)} h_u^{(l-1)}\n","\\end{equation}\n","    - 해당 내용은 `aggregate()` 함수에서 구현됩니다.\n","\n","    - Normalization: $\\ell$-2 normalization가 각 iteration마다 사용됩니다.\n","    - 해당 내용은 `forward()` 함수에서 구현됩니다.\n","\n"]},{"cell_type":"code","metadata":{"id":"RwG4HqCFCaOD"},"source":["class GraphSage(MessagePassing):\n","    \n","    def __init__(self, in_channels, out_channels, normalize = True,\n","                 bias = False, **kwargs):  \n","        super(GraphSage, self).__init__(**kwargs)\n","\n","        self.in_channels = in_channels\n","        self.out_channels = out_channels\n","        self.normalize = normalize\n","\n","        # Message and update function\n","        self.lin_l = nn.Linear(self.in_channels, self.out_channels) # for central node\n","        self.lin_r = nn.Linear(self.in_channels, self.out_channels) # to aggregated message from neighbors\n","\n","        # Initialize\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        self.lin_l.reset_parameters()\n","        self.lin_r.reset_parameters()\n","\n","    def forward(self, x, edge_index, size = None):\n","        \"\"\"\n","        ::param:: x has shape [N, in_channels]\n","        ::param:: edge_index has shape [2, E]\n","        \"\"\"\n","        # 1. First call propagate function to conduct the message passing.\n","        # propagate() internally calls the message(), aggregate() and update() functions.\n","        # See more information about propagate():\n","        # https://pytorch-geometric.readthedocs.io/en/latest/modules/nn.html#torch_geometric.nn.conv.message_passing.MessagePassing.propagate\n","        h_k = self.propagate(edge_index, x=x, size=size)\n","        # 2. Update our node embedding with skip connection.\n","        h_k = self.lin_l(x) + h_k\n","        # 3. If normalize is set, do L-2 normalization\n","        # See more information about normalize():\n","        # https://pytorch.org/docs/stable/generated/torch.nn.functional.normalize.html\n","        if self.normalize:\n","            out = F.normalize(h_k, p=2) \n","        return out\n","\n","    def message(self, x_j):\n","        \"\"\"Message function\n","        This function can take any argument as input which was initially passed \n","        to propagate(). Furthermore, tensors passed to propagate() can be mapped \n","        to the respective nodes and by appending _i or _j to the variable name, \n","        .e.g. x_i and x_j.\n","        \"\"\"\n","        out = self.lin_r(x_j)\n","        return out\n","\n","    def aggregate(self, inputs, index, dim_size = None):\n","        \"\"\"Aggregate function\n","        ::params:: inputs is the output of message computation\n","        \"\"\"\n","        out = None\n","\n","        # The axis along which to index number of nodes.\n","        node_dim = self.node_dim\n","\n","\n","        \"\"\"Use torch_scatter.scatter\n","        https://pytorch-scatter.readthedocs.io/en/latest/functions/scatter.html#torch_scatter.scatter\n","        Example: \n","        from torch_scatter import scatter\n","        src = torch.randn(10, 6, 64)\n","        index = torch.tensor([0, 1, 0, 1, 2, 1])\n","\n","        # Broadcasting in the first and last dim.\n","        out = scatter(src, index, dim=1, reduce=\"sum\")\n","\n","        print(out.size())\n","        \"\"\"\n","        out = torch_scatter.scatter(inputs, index, dim=node_dim, reduce=\"mean\")\n","\n","        return out\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qjcfF3RACdLD"},"source":["## GAT Implementation\n","\n","- Goal: `forward()`, `message()` 구현\n","    - GAT에서는 aggregation 할 때, attention이 적용됨.\n","    - The input to each graph attentional layer is a set of node features: \n","$\\mathbf{h} = \\{\\overrightarrow{h_1}, \\overrightarrow{h_2}, \\dots, \\overrightarrow{h_N}$\\}, $\\overrightarrow{h_i} \\in R^F$. \n","    - The output of each graph attentional layer is a new set of node features: \n","$\\mathbf{h'} = \\{\\overrightarrow{h_1'}, \\overrightarrow{h_2'}, \\dots, \\overrightarrow{h_N'}\\}$, with $\\overrightarrow{h_i'} \\in \\mathbb{R}^{F'}$.\n","\n","- GAT 구현 순서\n","1. 모든 노드에 공통적으로 weight matrix $\\mathbf{W} \\in \\mathbb{R}^{F' \\times F}$ 적용\n","2. 노드에 대해서 self-attention 수행을 통해 node $i$에 대한 이웃 노드 $j$의 어텐션 스코어 계산하는데, 이 때 masked attention을 수행해야 이웃 노드에 대한 정보만 가져올 수 있음.\n","\n","\\begin{equation}\n","e_{ij} = a(\\mathbf{W_l}\\overrightarrow{h_i}, \\mathbf{W_r} \\overrightarrow{h_j})\n","\\end{equation}\n","\n","\\begin{equation}\n","\\alpha_{ij} = \\frac{\\exp\\Big(\\text{LeakyReLU}\\Big(\\overrightarrow{a_l}^T \\mathbf{W_l} \\overrightarrow{h_i} + \\overrightarrow{a_r}^T\\mathbf{W_r}\\overrightarrow{h_j}\\Big)\\Big)}{\\sum_{k\\in \\mathcal{N}_i} \\exp\\Big(\\text{LeakyReLU}\\Big(\\overrightarrow{a_l}^T \\mathbf{W_l} \\overrightarrow{h_i} + \\overrightarrow{a_r}^T\\mathbf{W_r}\\overrightarrow{h_k}\\Big)\\Big)}\n","\\end{equation}\n","\n","3. 어텐션 스코어에 대한 normalization 수행\n","\\begin{equation}\n","h_i' = \\sum_{j \\in \\mathcal{N}_i} \\alpha_{ij} \\mathbf{W_r} \\overrightarrow{h_j}.\n","\\end{equation}\n","\n","- Multi-head attention은 이러한 어텐션 스코어를 $K$번 구하는 것\n","\\begin{equation}\n","    \\overrightarrow{h_i}' = ||_{k=1}^K \\Big(\\sum_{j \\in \\mathcal{N}_i} \\alpha_{ij}^{(k)} \\mathbf{W_r}^{(k)} \\overrightarrow{h_j}\\Big)\n","\\end{equation}"]},{"cell_type":"code","metadata":{"id":"w4j45gTpCeXO"},"source":["class GAT(MessagePassing):\n","\n","    def __init__(self, in_channels, out_channels, heads = 2,\n","                 negative_slope = 0.2, dropout = 0., **kwargs):\n","        super(GAT, self).__init__(node_dim=0, **kwargs)\n","\n","        self.in_channels = in_channels\n","        self.out_channels = out_channels\n","        self.heads = heads\n","        self.negative_slope = negative_slope\n","        self.dropout = dropout\n","\n","        # self.lin_l is the linear transformation that you apply to embeddings \n","        # BEFORE message passing.\n","        self.lin_l = nn.Linear(self.in_channels, self.heads * self.out_channels)\n","        self.lin_r = self.lin_l\n","\n","        self.att_l = nn.Parameter(torch.zeros(self.heads, self.out_channels))\n","        self.att_r = nn.Parameter(torch.zeros(self.heads, self.out_channels))\n","\n","        self.reset_parameters()\n","\n","    def reset_parameters(self):\n","        nn.init.xavier_uniform_(self.lin_l.weight)\n","        nn.init.xavier_uniform_(self.lin_r.weight)\n","        nn.init.xavier_uniform_(self.att_l)\n","        nn.init.xavier_uniform_(self.att_r)\n","\n","    def forward(self, x, edge_index, size = None):\n","        \n","        H, C = self.heads, self.out_channels\n","\n","        # 1. First apply linear transformation to node embeddings, and split that \n","        #    into multiple heads. We use the same representations for source and\n","        #    target nodes, but apply different linear weights (W_l and W_r)\n","        h_i = self.lin_l(x).view(-1, H, C)\n","        h_j = self.lin_r(x).view(-1, H, C)\n","\n","        # 2. Calculate alpha vectors for central nodes (alpha_l) and neighbor nodes (alpha_r).                               \n","        alpha_l = self.att_l.unsqueeze(0) * h_i\n","        alpha_r = self.att_r.unsqueeze(0) * h_j\n","        \n","        # 3. Call propagate function to conduct the message passing with \n","        # alpha = (alpha_l, alpha_r) as a parameter.\n","        out = self.propagate(edge_index, x=(h_i, h_j), alpha=(alpha_l, alpha_r))\n","\n","        # 4. Transform the output back to the shape of N * d.\n","        out = out.view(-1, H*C)\n","\n","        return out\n","\n","\n","    def message(self, x_j, alpha_j, alpha_i, index, ptr, size_i):\n","        # 1. Calculate the final attention weights and apply leaky Relu.\n","        alpha_ij = F.leaky_relu(alpha_i + alpha_j, negative_slope=self.negative_slope)\n","        \n","        # 2. Calculate softmax over the neighbor nodes for all the nodes.\n","        # * ptr (LongTensor, optional): If given, computes the softmax based on\n","        #    sorted inputs in CSR representation. You can simply pass it to softmax.\n","        if ptr is not None:\n","            alpha_ij = softmax(alpha_ij, ptr)\n","        else:\n","            alpha_ij = softmax(alpha_ij, index)\n","\n","        # 3. Apply dropout to attention weights (alpha).    \n","        alpha_ij = F.dropout(alpha_ij, p=self.dropout)\n","        \n","        # 4. Multiply embeddings and attention weights.\n","        out = x_j * alpha_ij # E * H * d\n","        return out\n","\n","\n","    def aggregate(self, inputs, index, dim_size = None):\n","        # Aggregate function\n","        # Use torch_scatter.scatter:\n","        # https://pytorch-scatter.readthedocs.io/en/latest/functions/scatter.html#torch_scatter.scatter\n","        node_dim = self.node_dim\n","        out = torch_scatter.scatter(inputs, index, dim=node_dim, reduce=\"mean\")\n","    \n","        return out"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V2dkgSuWCheU"},"source":["## Building Optimizers"]},{"cell_type":"code","metadata":{"id":"f_TIQ8NPCjBP"},"source":["import torch.optim as optim\n","\n","def build_optimizer(args, params):\n","    weight_decay = args.weight_decay\n","    filter_fn = filter(lambda p : p.requires_grad, params)\n","    if args.opt == 'adam':\n","        optimizer = optim.Adam(filter_fn, lr=args.lr, weight_decay=weight_decay)\n","    elif args.opt == 'sgd':\n","        optimizer = optim.SGD(filter_fn, lr=args.lr, momentum=0.95, weight_decay=weight_decay)\n","    elif args.opt == 'rmsprop':\n","        optimizer = optim.RMSprop(filter_fn, lr=args.lr, weight_decay=weight_decay)\n","    elif args.opt == 'adagrad':\n","        optimizer = optim.Adagrad(filter_fn, lr=args.lr, weight_decay=weight_decay)\n","    if args.opt_scheduler == 'none':\n","        return None, optimizer\n","    elif args.opt_scheduler == 'step':\n","        scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=args.opt_decay_step, gamma=args.opt_decay_rate)\n","    elif args.opt_scheduler == 'cos':\n","        scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=args.opt_restart)\n","    return scheduler, optimizer"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hBYdWFwYCkwY"},"source":["## Training and Testing"]},{"cell_type":"code","metadata":{"id":"_tZMWRc8CmGg"},"source":["import time\n","\n","import networkx as nx\n","import numpy as np\n","import torch\n","import torch.optim as optim\n","\n","from torch_geometric.datasets import TUDataset\n","from torch_geometric.datasets import Planetoid\n","from torch_geometric.data import DataLoader\n","\n","import torch_geometric.nn as pyg_nn\n","\n","import matplotlib.pyplot as plt\n","\n","from tqdm.notebook import tqdm\n","\n","\n","def train(dataset, args):\n","    \n","    print(\"Node task. test set size:\", np.sum(dataset[0]['train_mask'].numpy()))\n","    test_loader = loader = DataLoader(dataset, batch_size=args.batch_size, shuffle=True)\n","\n","    # build model\n","    model = GNNStack(dataset.num_node_features, args.hidden_dim, dataset.num_classes, \n","                            args)\n","    scheduler, opt = build_optimizer(args, model.parameters())\n","\n","    # train\n","    losses = []\n","    test_accs = []\n","    pbar = tqdm(range(args.epochs))\n","    for epoch in range(args.epochs):\n","        total_loss = 0\n","        model.train()\n","        for batch in loader:\n","            opt.zero_grad()\n","            pred = model(batch)\n","            label = batch.y\n","            pred = pred[batch.train_mask]\n","            label = label[batch.train_mask]\n","            loss = model.loss(pred, label)\n","            loss.backward()\n","            opt.step()\n","            total_loss += loss.item() * batch.num_graphs\n","        total_loss /= len(loader.dataset)\n","        losses.append(total_loss)\n","\n","        if epoch % 10 == 0:\n","          test_acc = test(test_loader, model)\n","          test_accs.append(test_acc)\n","          pbar.set_description(f\"Loss for Epoch {epoch}: {total_loss:.4f} | Test Accuracy for is Epoch {epoch}: {test_acc:.4f}\")\n","        else:\n","          test_accs.append(test_accs[-1])\n","        \n","        pbar.update()\n","    pbar.close()\n","    return test_accs, losses\n","\n","def test(loader, model, is_validation=True):\n","    model.eval()\n","\n","    correct = 0\n","    for data in loader:\n","        with torch.no_grad():\n","            # max(dim=1) returns values, indices tuple; only need indices\n","            pred = model(data).max(dim=1)[1]\n","            label = data.y\n","\n","        mask = data.val_mask if is_validation else data.test_mask\n","        # node classification: only evaluate on nodes in test set\n","        pred = pred[mask]\n","        label = data.y[mask]\n","            \n","        correct += pred.eq(label).sum().item()\n","\n","    total = 0\n","    for data in loader.dataset:\n","        total += torch.sum(data.val_mask if is_validation else data.test_mask).item()\n","    return correct / total\n","  \n","class objectview(object):\n","    def __init__(self, d):\n","        self.__dict__ = d\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L7-h7jIsCns4"},"source":["## Experiments"]},{"cell_type":"code","metadata":{"id":"qe9B45l9Cpz2","colab":{"base_uri":"https://localhost:8080/","height":508,"referenced_widgets":["8a0aae31ed8f40f7b86504a6513e3afd","129ae7af501a4e69a101ae2d99ad333e","86239ceb48e24910beee387c1e1631ac","de287927101b48baafd21b27395d4d42","8ac9d4583024493a89d5246df1598938","72c3e473df17481caf683aa07a73af2b","2e79ab5ccfce438087fe32e919817f2f","a6101dd8d6b645c194eaca2426f76d95","f24260774b114d89a02711fb140445ce","7d6a91a11aed437384e279cd7d56aef9","f2e37ec84590445daf94fbf19368d1ef","70843427c6c04909b33f5095c75bc4a2","fcbb87a919ae4075980641cfebf698bc","56cd81cdab9a424e958c6ad5ca931c61","a6535fa89cf646a8915cd07ef4f586aa","f0395a746fcd4231a09c1b57ee21cf05","3399c91b62d94326b8a981d62d0dacef","8e2e2743ab09465589b30906308557d2","f6dad5dcf7184c818ab53e4e142169bf","594ad399ffe044f2b50c0dba87b4315a","08180288d4b24449a93bb00b51f2fc7a","29c17cb836304e659d8d832e41fcdb81"]},"executionInfo":{"status":"ok","timestamp":1636175346741,"user_tz":-540,"elapsed":156169,"user":{"displayName":"Jiwon Kang","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GixQYpi_RBtTGcWbRNimF9qJjS18QgWoTMByMMiaQ=s64","userId":"00753733448893989043"}},"outputId":"0cbecc1c-dfcf-48ea-e106-ee9667394944"},"source":["def main():\n","    for args in [\n","        {'model_type': 'GraphSage', 'dataset': 'cora', 'num_layers': 2, \n","         'heads': 1, 'batch_size': 32, 'hidden_dim': 32, 'dropout': 0.5, \n","         'epochs': 500, 'opt': 'adam', 'opt_scheduler': 'none', \n","         'opt_restart': 0, 'weight_decay': 5e-3, 'lr': 0.01},\n","    ]:\n","        args = objectview(args)\n","        for model in ['GraphSage', 'GAT']:\n","            args.model_type = model\n","\n","            # Match the dimension.\n","            if model == 'GAT':\n","              args.heads = 2\n","            else:\n","              args.heads = 1\n","\n","            if args.dataset == 'cora':\n","                dataset = Planetoid(root='/tmp/cora', name='Cora')\n","            else:\n","                raise NotImplementedError(\"Unknown dataset\") \n","            test_accs, losses = train(dataset, args) \n","\n","            print(\"Maximum accuracy: {0}\".format(max(test_accs)))\n","            print(\"Minimum loss: {0}\".format(min(losses)))\n","\n","            plt.title(dataset.name)\n","            plt.plot(losses, label=\"₩training loss\" + \" - \" + args.model_type)\n","            plt.plot(test_accs, label=\"test accuracy\" + \" - \" + args.model_type)\n","        plt.legend()\n","        plt.show()\n","\n","if __name__ == '__main__':\n","    main()"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Node task. test set size: 140\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch_geometric/deprecation.py:13: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead\n","  warnings.warn(out)\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"8a0aae31ed8f40f7b86504a6513e3afd","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/500 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Maximum accuracy: 0.744\n","Minimum loss: 0.12036123126745224\n","Node task. test set size: 140\n"]},{"output_type":"display_data","data":{"application/vnd.jupyter.widget-view+json":{"model_id":"70843427c6c04909b33f5095c75bc4a2","version_minor":0,"version_major":2},"text/plain":["  0%|          | 0/500 [00:00<?, ?it/s]"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Maximum accuracy: 0.586\n","Minimum loss: 0.35281965136528015\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"KbSYTdbZpuwP"},"source":["# Quiz 1. `main()`을 실행하면 출력되는 Result Figure에 기반하여 GraphSage와 GAT의 성능을 분석하세요."]},{"cell_type":"markdown","metadata":{"id":"gHELqjARZ1W5"},"source":["# Quiz 2: GraphSage Layer를 튜닝하여 Test set의 정확도를 높여보세요.\n","- Parameter, Aggrgation Function (mean, max, LSTM...) 등을 변경하여 Test set에 대한 평가를 수행합니다."]},{"cell_type":"code","metadata":{"id":"rxFhx3B6qwzg"},"source":["# Your code here"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RfFLBka9qsnq"},"source":["- 답변 및 Figure는 여기에 작성해주세요 \n","- 셀의 위치: (Quiz 3) 바로 위에 이 셀이 있어야 합니다\n","- 답변에는 튜닝한 부분과 해당 튜닝의 Test 성능 결과 및 분석이 포함되어야 합니다.\n"]},{"cell_type":"markdown","metadata":{"id":"PlCtBEBLMBkR"},"source":["# Quiz 3: GAT Layer를 튜닝하여 Test set의 정확도를 높여보세요.\n","- Parameter, Aggrgation Function 등을 변경하여 Test set에 대한 평가를 수행합니다."]},{"cell_type":"code","metadata":{"id":"g6UsDxRwrAWz"},"source":["# Your code here"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vfKG59gyrAW0"},"source":["- 답변 및 Figure는 여기에 작성해주세요 \n","- 셀의 위치: 맨마지막에 이 셀이 있어야 합니다\n","- 답변에는 튜닝한 부분과 해당 튜닝의 Test 성능 결과 및 분석이 포함되어야 합니다.\n"]}]}